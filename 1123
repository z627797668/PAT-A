#include<stdio.h>
#include<stdlib.h>
#include<queue>
using namespace std;
const int maxn = 25;
int tree[50];
int N;
int num[maxn];
struct node
{
	int height;
	int data;
	node*lchild;
	node*rchild;
};
node*Newnode(int data)
{
	node*root = new node;
	root->data = data;
	root->height = 1;
	root->lchild = root->rchild = NULL;
	return root;
}
int getHeight(node*root)
{
	if (root == NULL)
		return 0;
	else
	{
		return root->height;
	}
}
void updateHeight(node*root)
{
	
		if (getHeight(root->lchild) > getHeight(root->rchild))
			root->height=getHeight(root->lchild) + 1;
		else
			root->height=getHeight(root->rchild) + 1;
}
int getBalancefactor(node*root)
{
	return getHeight(root->lchild) - getHeight(root->rchild);
}
void L(node*&root)
{
	node*temp = root->rchild;
	root->rchild = temp->lchild;
	temp->lchild = root;
	updateHeight(root);
	updateHeight(temp);
	root = temp;
}
void R(node*&root)
{
	node*temp = root->lchild;
	root->lchild = temp->rchild;
	temp->rchild = root;
	updateHeight(root);
	updateHeight(temp);
	root = temp;
}
void insert(node*&root, int data)
{
	if (root == NULL)
	{
		root = Newnode(data);
		return;
	}
	if (root->data > data)
	{
		insert(root->lchild, data);
		updateHeight(root);
		if (getBalancefactor(root) == 2)
		{
			if (getBalancefactor(root->lchild) == 1)
			{
				R(root);
			}
			else
			{
				L(root->lchild);
				R(root);
			}
		}
	}
	else
	{
		insert(root->rchild, data);
		updateHeight(root);
		if (getBalancefactor(root) == -2)
		{
			if (getBalancefactor(root->rchild) == -1)
			{
				L(root);
			}
			else
			{
				R(root->rchild);
				L(root);
			}
		}
	}
}
int pc = 0;
void levelorder(node*root)
{
	queue<node*>q;
	q.push(root);
	while (!q.empty())
	{
		node*now = q.front();
		q.pop();
		printf("%d", now->data);
		pc++;
		if (pc != N)
			printf(" ");
		if (now->lchild != NULL)q.push(now->lchild);
		if (now->rchild != NULL)q.push(now->rchild);
	}
}
int s = 1;
void create(node*root, int s)
{
	tree[s] = root->data;
	if (root->lchild != NULL)create(root->lchild, 2 * s);
	if (root->rchild != NULL)create(root->rchild, 2 * s + 1);
}
int main()
{
	scanf("%d", &N);
	for (int i = 0; i < 50; i++)
	{
		tree[i] = -1;
	}
	for (int i = 0; i < N; i++)
	{
		scanf("%d", &num[i]);
	}
	node*root = NULL;
	for (int i = 0; i < N; i++)
	{
		insert(root, num[i]);
	}
	levelorder(root);
	printf("\n");
	create(root, s);
	int count = 0;
	for (int i = 1; i <=N; i++)
	{
		if (tree[i] != -1)
			count ++ ;
		else
			break;
	}
	if (count == N)
		printf("YES");
	else
		printf("NO");
	printf("\n");
	system("pause");
	return 0;
}

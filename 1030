#include<stdio.h>
#include<stdlib.h>
#include<vector>
#include<algorithm>
using namespace std;
int N, M, S, D;
const int INF = 10000000;
const int MAXV = 505;
int G[MAXV][MAXV];
int d[MAXV];
int cost[MAXV][MAXV];
vector<int>pre[MAXV];
vector<int>tempPath, path;
bool vis[MAXV] = { false };
void Dijkstra(int s)
{
	fill(d, d + MAXV, INF);
	d[s] = 0;
	for (int i = 0; i < N; i++)
	{
		int MIN = INF, u = -1;
		for (int j = 0; j < N; j++)
		{
			if (vis[j] == false && d[j] < MIN)
			{
				MIN = d[j];
				u = j;
			}
		}
		if (u == -1)return;
		vis[u] = true;
		for (int v = 0; v < N; v++)
		{
			if (vis[v] == false && G[u][v] != INF)
			{
				if (G[u][v] + d[u] < d[v])
				{
					d[v] = G[u][v] + d[u];
					pre[v].clear();
					pre[v].push_back(u);
				}
				else if (d[v] == (G[u][v] + d[u]))
				{
					pre[v].push_back(u);
				}
			}
		}
	}
}
int mincost = INF;
void DFS(int v)
{
	if (v == S)
	{
		tempPath.push_back(v);
		int co = 0;
		for (int i = 0; i <tempPath.size()-1 ; i++)
		{
			int id = tempPath[i], idnext = tempPath[i + 1];
			co += cost[id][idnext];
		}
		if (co < mincost)
		{
			mincost = co;
			path = tempPath;
		}
		tempPath.pop_back();
		return;
	}
	tempPath.push_back(v);
	for (int i = 0; i < pre[v].size(); i++)
	{
		DFS(pre[v][i]);
	}
	tempPath.pop_back();
}
int main()
{
	scanf("%d %d %d %d", &N, &M, &S, &D);
	fill(G[0], G[0] + MAXV * MAXV, INF);
	fill(cost[0], cost[0] + MAXV * MAXV, INF);
	int t1, t2, tg, tc;
	for (int i = 0; i < M; i++)
	{
		scanf("%d %d %d %d", &t1, &t2, &tg, &tc);
		G[t1][t2] = G[t2][t1] = tg;
		cost[t1][t2] = cost[t2][t1] = tc;
	}
	Dijkstra(S);
	DFS(D);
	for (int i = path.size()-1; i >=0; i--)
	{
		printf("%d ", path[i]);
	}
	printf("%d %d", d[D],mincost);
	system("pause");
	return 0;
}

#include<stdio.h>
#include<stdlib.h>
#include<algorithm>
using namespace std;
int N, K, M;
int p[6];
const int maxn = 10005;
struct Node
{
	bool flag=false;
	int solve=0;
	int grade[6] = { -1,-1,-1,-1,-1,-1 };
	int id;
	int r;
	int sum=0;
}node[maxn];
bool cmp(Node a, Node b)
{
	if (a.flag != b.flag)return a.flag > b.flag;
	else if (a.sum != b.sum)return a.sum > b.sum;
	else if (a.solve != b.solve)return a.solve > b.solve;
	else return a.id < b.id;
}
int main()
{
	scanf("%d %d %d", &N, &K, &M);
	for (int i = 0; i < K; i++)
	{
		scanf("%d", &p[i]);
	}
	int tid, pid, tscore;
	for (int i = 0; i < M; i++)
	{
		scanf("%d %d %d", &tid, &pid, &tscore);
		if (tscore != -1)
			node[tid].flag = true;
		node[tid].id = tid;
		if (tscore == -1&&node[tid].grade[pid-1]==-1)
			node[tid].grade[pid - 1] = 0;
		if (tscore>node[tid].grade[pid-1])
		{
			if (tscore == p[pid - 1])
			{
				node[tid].solve++;
			}
			node[tid].grade[pid - 1] = tscore;
		}
	}
	for (int i = 1; i <= N; i++)
	{
		for (int j = 0; j < K; j++)
		{
			if (node[i].flag == true && node[i].grade[j] != -1)
				node[i].sum += node[i].grade[j];
		}
	}
	sort(node + 1, node + 1 + N, cmp);
	int r = 1;
	for (int i = 1; i <= N&&node[i].flag==true; i++)
	{
		if (i >= 2 && node[i].sum == node[i - 1].sum)
			;
		else
		{
			r = i;
		}
		printf("%d %05d %d ", r, node[i].id, node[i].sum);
		for (int j = 0; j < K; j++)
		{
			if (node[i].grade[j] != -1)
				printf("%d", node[i].grade[j]);
			else
				printf("-");
			if (j != K - 1)
				printf(" ");
			else
			{
				printf("\n");
			}
		}
	}
	system("pause");
	return 0;
}

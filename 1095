#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<algorithm>
#include<string>
#include<map>
#include<iostream>
using namespace std;
int N, K;
const int maxn = 10050;
struct Node
{
	int time;
	int flag;
	char s[10];
}node[maxn],valid[maxn];
map<string, int>parktime;
int change(int hour, int min, int sec)
{
	return hour * 3600 + min * 60 + sec;
}
int validnum = 0;
bool cmp(Node a, Node b)
{
	if (strcmp(a.s, b.s) != 0)return strcmp(a.s, b.s) < 0;
	else return a.time < b.time;
}
bool cmp2(Node a, Node b)
{
	return a.time < b.time;
}
int main()
{
	scanf("%d %d", &N,&K);
	int hour, min, sec;
	char fl[6];
	for (int i = 0; i < N; i++)
	{
		scanf("%s %d:%d:%d %s", node[i].s, &hour, &min, &sec, fl);
		node[i].time = change(hour, min, sec);
		if (strcmp(fl, "in") == 0)
			node[i].flag = 0;
		else
			node[i].flag = 1;
	}
	sort(node, node + N, cmp);
	int maxtime = -1;
	for (int i = 0; i < N-1; i++)
	{
		if (strcmp(node[i].s, node[i + 1].s) == 0 && node[i].flag == 0 && node[i + 1].flag == 1)
		{
			valid[validnum++] = node[i];
			valid[validnum++] = node[i + 1];
			if (parktime.find(node[i].s) == parktime.end())
			{
				parktime[node[i].s] = 0;
			}
			parktime[node[i].s] += node[i + 1].time - node[i].time;
			if (parktime[node[i].s] > maxtime)
				maxtime = parktime[node[i].s];
		}
	}
	sort(valid, valid + validnum, cmp2);
	int now = 0;
	int count = 0;
	for (int i = 0; i < K; i++)
	{
		scanf("%d:%d:%d", &hour, &min, &sec);
		int check=change(hour,min,sec);
		while (now<validnum&&check>=valid[now].time)
		{
			if (valid[now].flag == 0)
				count++;
			else
				count--;
			now++;
		}
		printf("%d\n", count);
	}
	map<string, int>::iterator it = parktime.begin();
	for (; it!=parktime.end(); it++)
	{
		if (it->second == maxtime)
			printf("%s ", it->first.c_str());
	}
	printf("%02d:%02d:%02d", maxtime / 3600, maxtime / 60 % 60, maxtime % 60);
	system("pause");
	return 0;
}

#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<queue>
#include<vector>
using namespace std;
const int maxn = 100005;
int N;
double P, r;
int minlevel = maxn,nump=0;
struct Node
{
	int level;
	vector<int>child;
}node[maxn];
void BFS(int root)
{
	queue<int>q;
	q.push(root);
	node[root].level = 1;
	while (!q.empty())
	{
		int front = q.front();
		if (node[front].child.size() == 0)
		{
			if (node[front].level < minlevel)
			{
				minlevel = node[front].level;
				nump = 1;
			}
			else if (node[front].level == minlevel)
			{
				nump++;
			}
		}
		q.pop();
		for (int i = 0; i < node[front].child.size(); i++)
		{
			node[node[front].child[i]].level = node[front].level + 1;
			q.push(node[front].child[i]);
		}
	}
}
int main()
{
	scanf("%d %lf %lf", &N, &P, &r);
	for (int i = 0; i < N; i++)
	{
		int temp, k;
		scanf("%d", &k);
		for (int j = 0; j < k; j++)
		{
			scanf("%d", &temp);
			node[i].child.push_back(temp);
		}
	}
	BFS(0);
	printf("%.4lf %d", P*pow((1.0)*(100 + r) / 100, minlevel - 1), nump);
	system("pause");
	return 0;
}

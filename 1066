#include<stdio.h>
#include<stdlib.h>
struct node
{
	int data;
	int height;
	node*lchild;
	node*rchild;
};
const int maxn = 25;
int N;
int num[maxn];
node* newNode(int data)
{
	node*root = new node;
	root->data = data;
	root->height = 1;
	root->lchild = root->rchild = NULL;
	return root;
}
int getHeight(node*root)
{
	if (root == NULL)
		return 0;
	else
		return root->height;
}
void updateHeight(node*&root)
{
		if (getHeight(root->lchild) > getHeight(root->rchild))
			root->height= getHeight(root->lchild) + 1;
		else
			root->height= getHeight(root->rchild) + 1;
}
int getBalanceFactor(node*root)
{
	return getHeight(root->lchild) - getHeight(root->rchild);
}
void L(node*&root)
{
	node*temp = root->lchild;
	root->lchild = temp->rchild;
	temp->rchild = root;
	updateHeight(root);
	updateHeight(temp);
	root = temp;
}
void R(node*&root)
{
	node*temp = root->rchild;
	root->rchild = temp->lchild;
	temp->lchild = root;
	updateHeight(root);
	updateHeight(temp);
	root = temp;
}
void insert(node*&root, int data)
{
	if (root == NULL)
		root = newNode(data);
	else
	{
		if (root->data > data)
		{
			insert(root->lchild, data);
			updateHeight(root);
			if (getBalanceFactor(root) == 2)
			{
				if (getBalanceFactor(root->lchild) == 1)
					L(root);
				else
				{
					R(root->lchild);
					L(root);
				}
			}
		}
		else
		{
			insert(root->rchild, data);
			updateHeight(root);
			if (getBalanceFactor(root) == -2)
			{
				if (getBalanceFactor(root->rchild) == -1)
					R(root);
				else
				{
					L(root->rchild);
					R(root);
				}
			}
		}
	}
}
int main()
{
	scanf("%d", &N);
	for (int i = 0; i < N; i++)
	{
		scanf("%d", &num[i]);
	}
	node*root = NULL;
	for (int i = 0; i < N; i++)
	{
		insert(root, num[i]);
	}
	printf("%d", root->data);
	system("pause");
	return 0;
}

#include<stdio.h>
#include<stdlib.h>
#include<queue>
using namespace std;
const int maxn = 35;
int in[maxn];
int post[maxn];
int princount = 0;
int N;
struct node
{
	int data;
	node*lchild;
	node*rchild;
};
node*create(int inL, int inR, int postL, int postR)
{
	if (inL > inR)
		return NULL;
	node*root = new node;
	root->data = post[postR];
	int k;
	for (k = inL; k < inR; k++)
	{
		if (in[k] == post[postR])
			break;
	}
	int numk = k - inL;
	root->lchild = create(inL,k-1,postL,postL+numk-1);
	root->rchild = create(k+1,inR,postL+numk,postR-1);
	return root;

}
void BFS(node* root)
{
	queue<node*>q;
	q.push(root);
	while (!q.empty())
	{
		node*now = q.front();
		q.pop();
		princount++;
		printf("%d", now->data);
		if (princount != N)
			printf(" ");
		if (now->lchild != NULL)q.push(now->lchild);
		if (now->rchild != NULL)q.push(now->rchild);

	}
}
int main()
{
	scanf("%d", &N);
	for (int i = 0; i < N; i++)
	{
		scanf("%d", &post[i]);
	}
	for (int i = 0; i < N; i++)
	{
		scanf("%d", &in[i]);
	}
	node*root = create(0,N-1,0,N-1);
	BFS(root);
	system("pause");
	return 0;
}

#include<stdio.h>
#include<stdlib.h>
#include<vector>
#include<math.h>
#include<algorithm>
using namespace std;
int N, K, P;
const int maxn = 20;
vector<int>temp, ans;
int maxsumf = -1;
void DFS(int index, int nowK, int sum,int sumsqu)
{
	if (sumsqu == N&&nowK==K)
	{
		if (sum > maxsumf)
		{
			maxsumf = sum;
			ans = temp;
		}
		else if (sum == maxsumf)
		{
			bool t = false;
			for (int i = 0; i <K; i++)
			{
				if (temp[i] > ans[i]) {
					t = true;
					break;
				}
				else if(temp[i]<ans[i])
				{
					break;
				}
			}
			if (t == true)
				ans = temp;
		}
		return;
	}
	if (index<1 || nowK>K || sumsqu > N)
		return;
	temp.push_back(index);
	DFS(index, nowK + 1, sum + index, sumsqu +pow(index,P));
	temp.pop_back();
	DFS(index - 1, nowK, sum, sumsqu);
}
int main()
{
	scanf("%d %d %d", &N, &K, &P);
	DFS(maxn, 0, 0, 0);
	if (ans.size() == 0)
		printf("Impossible");
	else
	{
		printf("%d = ", N);
		for (vector<int>::iterator it = ans.begin(); it != ans.end(); it++)
		{
			printf("%d^%d", *it, P);
			if ((it + 1) != ans.end())
				printf(" + ");
		}
	}
	system("pause");
	return 0;
}

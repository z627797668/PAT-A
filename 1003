#include<stdio.h>
#include<stdlib.h>
#include<algorithm>
using namespace std;
int N, M, C1, C2;
const int maxv = 505;
const int INF = 100000000;
int G[maxv][maxv];
int weight[maxv];
bool vis[maxv] = { false };
int num[maxv] = { 0 };
int w[maxv];
int d[maxv];
void Dijkstra(int s)
{
	fill(d, d + maxv, INF);
	fill(w, w + maxv, 0);
	d[s] = 0;
	num[s] = 1;
	w[s] = weight[s];
	for (int i = 0; i < N; i++)
	{
		int MIN = INF, u = -1;
		for (int j = 0; j < N; j++)
		{
			if (vis[j] == false && d[j] < MIN)
			{
				MIN = d[j];
				u = j;
			}
		}
		if (u == -1)return;
		vis[u] = true;
		for (int v = 0; v < N; v++)
		{
			if (vis[v] == false && G[u][v] != INF)
			{
				if (G[u][v] + d[u] < d[v])
				{
					d[v] = G[u][v] + d[u];
					num[v] = num[u];
					w[v] = weight[v] + w[u];
				}
				else if (G[u][v] + d[u] == d[v])
				{
					if(w[v] < weight[v] + w[u])
					w[v] = weight[v] + w[u];
					num[v] = num[u]+num[v];
				}
			}
		}
	}
}
int main()
{
	scanf("%d %d %d %d", &N, &M, &C1, &C2);
	fill(G[0], G[0] + maxv * maxv, INF);
	for (int i = 0; i < N; i++)
	{
		scanf("%d", &weight[i]);
	}
	int t1, t2, l;
	for (int i = 0; i < M; i++)
	{
		scanf("%d %d %d", &t1, &t2, &l);
		G[t1][t2] = l;
		G[t2][t1] = l;
	}
	Dijkstra(C1);
	printf("%d %d", num[C2], w[C2]);
	system("pause");
	return 0;
}
